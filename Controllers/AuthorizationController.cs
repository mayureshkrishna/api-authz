/*
 * Resource Access Management API
 *
 * Resource Access Management API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: aac@deloitte.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using apiauthz.Attributes;
//using apiauthz.Security;
using Microsoft.AspNetCore.Authorization;
using apiauthz.Models;
using apiauthz.Services;
using Microsoft.Extensions.Logging;


namespace apiauthz.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [Route("security/resourceaccessmanagement/v1/authorizations")]
    [ApiController]
    public class AuthorizationController : ControllerBase
    {
        private readonly AuthorizationService _authorizationService;
        private readonly ILogger<AuthorizationController> _logger;

        public AuthorizationController(AuthorizationService authorizationService, ILogger<AuthorizationController> logger)
        {
            _authorizationService = authorizationService;
            _logger = logger;
        }

        /// <summary>
        /// Create Authorization
        /// </summary>
        /// <remarks>Create Authorization to enforce resource access</remarks>
        /// <param name="authorization">Authorization to add</param>
        /// <response code="201">Authorization created</response>
        /// <response code="405">Invalid input</response>
        [HttpPost]
        [ValidateModelState]
        [SwaggerOperation("CreateAuthorization")]
        [Authorize]
        public ActionResult CreateAuthorization([FromBody]Authorization authorization)
        {
            var transactionId = Guid.NewGuid();

            try
            {
                
                // Save Authorization Request to Datastore
                _authorizationService.Create(authorization);
                _logger.LogInformation(transactionId + ": Authorization Created Successfully");
                Response.Headers.Add("x-transactionId", transactionId.ToString());
                return StatusCode(201);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, transactionId + ": " + ex.Message );
                Response.Headers.Add("x-transactionId", transactionId.ToString());
                return StatusCode(400);
            }
        }

        /// <summary>
        /// Delete Authorization
        /// </summary>
        /// <remarks>Delete Authorization to enforce resource access</remarks>
        /// <param name="id">ID of authorization to update</param>
        /// <response code="200">authorization Deleted</response>
        /// <response code="405">Invalid input</response>
        [HttpDelete("{id}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteAuthorization")]
        [Authorize]
        public IActionResult DeleteAuthorization([FromRoute][Required]Guid id)
        {

            // Delete Authorization from Datastore
            var authorization = _authorizationService.Get(id);
            if (authorization == null)
            {
                return NotFound();
            }

            _authorizationService.Remove(authorization.Id);

            return StatusCode(200);

        }

        /// <summary>
        /// Retrieve authorization by Id
        /// </summary>
        /// <remarks>Get authorization details by authorization id </remarks>
        /// <param name="id">ID of authorization to return</param>
        /// <response code="200">authorization Details for the authorization id</response>
        /// <response code="400">bad input parameter</response>
        [HttpGet("{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetAuthorization")]
        [SwaggerResponse(statusCode: 200, type: typeof(Authorization), description: "authorization Details for the authorization id")]
        [Authorize]
        public ActionResult<Authorization> GetAuthorization([FromRoute][Required]Guid id)
        {

            var authorization = _authorizationService.Get(id);
            if (authorization == null)
            {
                return NotFound();
            }

            return authorization;
        }


        // Get All Authorization for Debug Purposes - DO NOT ENABLE FOR RELEASE
        /*
        [HttpGet]
        [ValidateModelState]
        [SwaggerOperation("GetAllAuthorization")]
        [SwaggerResponse(statusCode: 200, type: typeof(Authorization), description: "authorization Details for the authorization id")]
        [Authorize]
        public List<Authorization> GetAllAuthorization()
        {

            var authorization = _authorizationService.Get();
            if (authorization == null)
            {
                return null;
            }

            return authorization;
        }
        */


        /// <summary>
        /// Update authorization
        /// </summary>
        /// <remarks>Update authorization to enforce resource access</remarks>
        /// <param name="id">ID of authorization to update</param>
        /// <param name="authorizationIn">Authorization to Update</param>
        /// <response code="200">authorization updated</response>
        /// <response code="405">Invalid input</response>
        [HttpPut("{id}")]
        [ValidateModelState]
        [SwaggerOperation("UpdateAuthorization")]
        [Authorize]
        public IActionResult UpdateAuthorization([FromRoute][Required]Guid id, [FromBody]Authorization authorizationIn)
        {
            var authorization = _authorizationService.Get(id);

            if (authorization == null)
            {
                return NotFound();
            }

            _authorizationService.Update(id, authorizationIn);

            return Ok();
        }

        /// <summary>
        /// Validate Authorization by Resource ID, User ID, Action and Scope
        /// </summary>
        /// <remarks>Validate Authorization by Resource ID, User ID, Action and Scope</remarks>
        /// <param name="resourceId">Resource to validate</param>
        /// <param name="userId">User ID to validate</param>
        /// <param name="action">Action to validate</param>
        /// <param name="scopes">Scopes to validate</param>
        /// <response code="200">authorization Details for the search query</response>
        /// <response code="404">Unauthorized</response>
        [HttpGet]
        [Route("validate")]
        [ValidateModelState]
        [SwaggerOperation("ValidateAuthorization")]
        [SwaggerResponse(statusCode: 200, type: typeof(Authorization), description: "authorization Details for the search query")]
        [Authorize]
        public ActionResult<Authorization> ValidateAuthorization([FromQuery][Required()]string resourceId, [FromQuery][Required()]string userId, [FromQuery][Required()]string action, [FromQuery]Scope scopes)
        {

            var transactionId = Guid.NewGuid();

            try
            {
                var authorization = _authorizationService.Validate(resourceId, userId, action, scopes);

                Response.Headers.Add("x-transactionId", transactionId.ToString());


                if (authorization == null)
                {
                    _logger.LogInformation(transactionId + ": UserId: " + userId + " UNAuthorized for Action: " + action + " On Resource: "+ resourceId);
                    return Unauthorized();
                }

                _logger.LogInformation(transactionId + ": UserId: " + userId + " Authorized for Action: " + action + " On Resource: " + resourceId);
                return authorization;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, transactionId + ": " + ex.Message);
                Response.Headers.Add("x-transactionId", transactionId.ToString());
                return StatusCode(400);
            }
            
        }
    }
}
