/*
 * Resource Access Management API
 *
 * Resource Access Management API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: aac@deloitte.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using apiauthz.Attributes;
//using apiauthz.Security;
using Microsoft.AspNetCore.Authorization;
using apiauthz.Models;
using apiauthz.Services;

namespace apiauthz.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [Route("security/resourceaccessmanagement/v1/policies")]
    [ApiController]
    public class PolicyController : ControllerBase
    {

        private readonly PolicyService _policyService;

        public PolicyController(PolicyService policyService)
        {
            _policyService = policyService;
        }

        /// <summary>
        /// Create Policy
        /// </summary>
        /// <remarks>Create policy to enforce resource access</remarks>
        /// <param name="policy">Policy to add</param>
        /// <response code="201">policy created</response>
        /// <response code="405">Invalid input</response>
        [HttpPost]
        [ValidateModelState]
        [SwaggerOperation("CreatePolicy")]
        [Authorize]
        public ActionResult CreatePolicy(Policy policy)
        {
            //Save Policy to Data Store
            _policyService.Create(policy);
            return StatusCode(201);

        }

        /// <summary>
        /// Delete Policy
        /// </summary>
        /// <remarks>Delete policy to enforce resource access</remarks>
        /// <param name="id">ID of policy to update</param>
        /// <response code="200">policy deleted</response>
        /// <response code="405">Invalid input</response>
        [HttpDelete("{id}")]
        [ValidateModelState]
        [SwaggerOperation("DeletePolicy")]
        [Authorize]
        public IActionResult DeletePolicy([FromRoute][Required]Guid id)
        {
            // Delete Policy from Datastore
            var policy = _policyService.Get(id);
            if (policy == null)
            {
                return NotFound();
            }

            _policyService.Remove(policy.Id);

            return StatusCode(200);
        }

        /// <summary>
        /// Retrieve Policy by Id
        /// </summary>
        /// <remarks>Get policy details by policy id </remarks>
        /// <param name="id">ID of policy to return</param>
        /// <response code="200">Policy Details for the policy id</response>
        /// <response code="400">bad input parameter</response>
        [HttpGet("{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetPolicy")]
        [SwaggerResponse(statusCode: 200, type: typeof(Policy), description: "Policy Details for the policy id")]
        [Authorize]
        public ActionResult<Policy> GetPolicy([FromRoute][Required]Guid id)
        {

            var policy = _policyService.Get(id);
            if (policy == null)
            {
                return NotFound();
            }

            return policy;
        }

        /// <summary>
        /// Update Policy
        /// </summary>
        /// <remarks>Update policy to enforce resource access</remarks>
        /// <param name="id">ID of policy to update</param>
        /// <param name="body">Policy to Update</param>
        /// <response code="200">policy updated</response>
        /// <response code="405">Invalid input</response>
        [HttpPut("{id}")]
        [ValidateModelState]
        [SwaggerOperation("UpdatePolicy")]
        [Authorize]
        public IActionResult UpdatePolicy([FromRoute][Required]Guid id, [FromBody]Policy policyIn)
        {
            var policy = _policyService.Get(id);

            if (policy == null)
            {
                return NotFound();
            }

            _policyService.Update(id, policyIn);

            return Ok();
        }
    }
}
