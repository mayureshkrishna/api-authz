/*
 * Resource Access Management API
 *
 * Resource Access Management API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: aac@deloitte.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using apiauthz.Attributes;
//using apiauthz.Security;
using Microsoft.AspNetCore.Authorization;
using apiauthz.Models;
using apiauthz.Services;

namespace apiauthz.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [Route("security/resourceaccessmanagement/v1/roles")]
    [ApiController]
    public class RoleController : ControllerBase
    {

        private readonly RoleService _roleService;

        public RoleController(RoleService roleService)
        {
            _roleService = roleService;
        }

        /// <summary>
        /// Create Role
        /// </summary>
        /// <remarks>Create Role to enforce resource access</remarks>
        /// <param name="role">Role to add</param>
        /// <response code="201">Role created</response>
        /// <response code="405">Invalid input</response>
        [HttpPost]
        [ValidateModelState]
        [SwaggerOperation("CreateRole")]
        [Authorize]
        public ActionResult CreateRole([FromBody]Role role)
        {

            //Save Role to Data Store
            _roleService.Create(role);
            return StatusCode(201);
        }

        /// <summary>
        /// Delete Role
        /// </summary>
        /// <remarks>Delete Role to enforce resource access</remarks>
        /// <param name="id">ID of Role to update</param>
        /// <response code="200">Role Deleted</response>
        /// <response code="405">Invalid input</response>
        [HttpDelete("{id}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteRole")]
        [Authorize]
        public IActionResult DeleteRole([FromRoute][Required]Guid id)
        {
            // Delete Role from Datastore
            var role = _roleService.Get(id);
            if (role == null)
            {
                return NotFound();
            }

            _roleService.Remove(role.Id);
            return StatusCode(200);
        }

        /// <summary>
        /// Retrieve Role by Id
        /// </summary>
        /// <remarks>Get Role details by Role id </remarks>
        /// <param name="id">ID of Role to return</param>
        /// <response code="200">Role Details for the Role id</response>
        /// <response code="400">bad input parameter</response>
        [HttpGet("{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetRole")]
        [SwaggerResponse(statusCode: 200, type: typeof(Role), description: "Role Details for the Role id")]
        [Authorize]
        public ActionResult<Role> GetRole([FromRoute][Required]Guid id)
        {
            var role = _roleService.Get(id);
            if (role == null)
            {
                return NotFound();
            }

            return role;
        }

        /// <summary>
        /// Update Role
        /// </summary>
        /// <remarks>Update Role to enforce resource access</remarks>
        /// <param name="id">ID of Role to update</param>
        /// <param name="roleIn">Role to Update</param>
        /// <response code="200">Role updated</response>
        /// <response code="405">Invalid input</response>
        [HttpPut("{id}")]
        [ValidateModelState]
        [SwaggerOperation("UpdateRole")]
        [Authorize]
        public IActionResult UpdateRole([FromRoute][Required]Guid id, [FromBody]Role roleIn)
        {
            var role = _roleService.Get(id);

            if (role == null)
            {
                return NotFound();
            }

            _roleService.Update(id, roleIn);

            return Ok();
        }
    }
}
