/*
 * Resource Access Management API
 *
 * Resource Access Management API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: aac@deloitte.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;

namespace apiauthz.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Authorization : IEquatable<Authorization>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id")]
        [BsonId]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets ResourceId
        /// </summary>
        [Required]
        [DataMember(Name="resourceId")]
        public string ResourceId { get; set; }

        /// <summary>
        /// Gets or Sets RoleId
        /// </summary>
        [Required]
        [DataMember(Name="roleId")]
        public Guid RoleId { get; set; }

        /// <summary>
        /// Gets or Sets PolicyId
        /// </summary>
        [Required]
        [DataMember(Name="policyId")]
        public Guid PolicyId { get; set; }

        /// <summary>
        /// Gets or Sets ScopeMap
        /// </summary>
        [DataMember(Name="scopeMap")]
        public Scope ScopeMap { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Authorization {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  RoleId: ").Append(RoleId).Append("\n");
            sb.Append("  PolicyId: ").Append(PolicyId).Append("\n");
            sb.Append("  ScopeMap: ").Append(ScopeMap).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Authorization)obj);
        }

        /// <summary>
        /// Returns true if Authorization instances are equal
        /// </summary>
        /// <param name="other">Instance of Authorization to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Authorization other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ResourceId == other.ResourceId ||
                    ResourceId != null &&
                    ResourceId.Equals(other.ResourceId)
                ) && 
                (
                    RoleId == other.RoleId ||
                    RoleId != null &&
                    RoleId.Equals(other.RoleId)
                ) && 
                (
                    PolicyId == other.PolicyId ||
                    PolicyId != null &&
                    PolicyId.Equals(other.PolicyId)
                ) && 
                (
                    ScopeMap == other.ScopeMap ||
                    ScopeMap != null &&
                    ScopeMap.Equals(other.ScopeMap)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ResourceId != null)
                    hashCode = hashCode * 59 + ResourceId.GetHashCode();
                    if (RoleId != null)
                    hashCode = hashCode * 59 + RoleId.GetHashCode();
                    if (PolicyId != null)
                    hashCode = hashCode * 59 + PolicyId.GetHashCode();
                    if (ScopeMap != null)
                    hashCode = hashCode * 59 + ScopeMap.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Authorization left, Authorization right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Authorization left, Authorization right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
